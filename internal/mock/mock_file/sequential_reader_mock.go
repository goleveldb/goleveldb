// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/goleveldb/goleveldb/file (interfaces: SequentialReader)

// Package mock_file is a generated GoMock package.
package mock_file

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	slice "github.com/goleveldb/goleveldb/slice"
)

// MockSequentialReader is a mock of SequentialReader interface.
type MockSequentialReader struct {
	ctrl     *gomock.Controller
	recorder *MockSequentialReaderMockRecorder
}

// MockSequentialReaderMockRecorder is the mock recorder for MockSequentialReader.
type MockSequentialReaderMockRecorder struct {
	mock *MockSequentialReader
}

// NewMockSequentialReader creates a new mock instance.
func NewMockSequentialReader(ctrl *gomock.Controller) *MockSequentialReader {
	mock := &MockSequentialReader{ctrl: ctrl}
	mock.recorder = &MockSequentialReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSequentialReader) EXPECT() *MockSequentialReaderMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockSequentialReader) Read(arg0 int) (slice.Slice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0)
	ret0, _ := ret[0].(slice.Slice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockSequentialReaderMockRecorder) Read(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockSequentialReader)(nil).Read), arg0)
}

// Skip mocks base method.
func (m *MockSequentialReader) Skip(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Skip", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Skip indicates an expected call of Skip.
func (mr *MockSequentialReaderMockRecorder) Skip(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Skip", reflect.TypeOf((*MockSequentialReader)(nil).Skip), arg0)
}
